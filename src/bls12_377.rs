use crate::IndifferentiableHash;
use ark_bls12_377::{g1::Parameters, Fq};
use ark_ec::short_weierstrass_jacobian::GroupAffine;
use ark_ff::MontFp;
use ark_ff::field_new;
use ark_ff::Field;
use ark_ff::PrimeField;

impl IndifferentiableHash for Parameters {
    // m = (q - 7) // 9
    const M: Self::BaseField = mont_fp!(Fq, "28740491779218788223405859299432614837377056972768295615542695851857829816482313641663209793285928902715591273130");
    // w is a primitive 3rd root of unity
    // w = b^((q-1) // 3)
    const W: Self::BaseField = field_new!(Fq, "80949648264912719408558363140637477264845294720710499478137287262712535938301461879813459410945");
    // z (i.e., zeta in [1, Section 3]) is a primitive 9th root of unity
    // z = w.nth_root(3)
    const Z: Self::BaseField = field_new!(Fq, "0");
    // sqrt(c) = w2
    const C: Self::BaseField=field_new!(Fq, "80949648264912719408558363140637477264845294720710499478137287262712535938301461879813459410945");

    /// affine curve point
    type GroupAffine = GroupAffine<Self>;

    /// rational map Fq^2 -> T(Fq)
    //  [1, Lemma 1] states that T is given in the affine space A^5(y0,y1,y2,t1,t2) by the two equations
    //  y1^2 - b = b*(y0^2 - b)*t1^3,
    //  y2^2 - b = b^2*(y0^2 - b)*t2^3,
    //  where tj := xj/x0.
    //  The threefold T can be regarded as an elliptic curve in A^3(y0,y1,y2) over the function field F := Fq(s1,s2),
    //  where sj := tj^3.
    //  By virtue of [1, Theorem 2] the non-torsion part of the Mordell-Weil group T(F) is generated by phi from [1, Theorem 1].
    fn phi(t1: &Self::BaseField, t2: &Self::BaseField) -> [Self::BaseField; 5] {
        let one = Self::BaseField::from(1u64);
        let two = Self::BaseField::from(2u64);
        let three = Self::BaseField::from(3u64);

        let s1 = *t1 * *t1 * *t1;
        let s2 = *t2 * *t2 * *t2;
        let s1s1 = s1.square();
        let s2s2 = s2.square();
        let s1s2 = s1 * s2;

        let w2 = Self::W.square();

        let a20 = w2 * s1s1;
        let a11 = two * s1s2;
        let a10 = two * Self::W * s1;
        let a02 = Self::W * s2s2;
        let a01 = two * w2 * s2;

        let num0 = a20 - a11 + a10 + a02 + a01 - three;
        let num1 = -three * a20 + a11 + a10 + a02 - a01 + one;
        let num2 = a20 + a11 - a10 - three * a02 + a01 + one;
        let den = a20 - a11 - a10 + a02 - a01 + one;
        [num0, num1, num2, den, s1s2]
    }

    ///  Auxiliary map h': T(Fq) -> Eb(Fq):
    //
    //  In [1, Section 2] we deal with a Calabi-Yau threefold defined as
    //  the quotient T := Eb x Eb' x Eb'' / [w] x [w] x [w],
    //  where Eb', Eb'' are the cubic twists of Eb
    //  and [w](x, y) -> (wx, y) is an automorphism of order 3 on Eb, Eb', and Eb''.
    //
    fn h_prime(inputs: &[Self::BaseField; 6]) -> Self::GroupAffine {
        let num0 = inputs[0];
        let num1 = inputs[1];
        let num2 = inputs[2];
        let den = inputs[3];
        let t1 = inputs[4];
        let t2 = inputs[5];

        let v = den.square();
        let u = num0.square() - v;
        let v2 = v.square();
        let v4 = v2.square();
        let v5 = v * v4;
        let v8 = v4.square();

        let theta = u * v5 * (u * v8).pow(Self::M.into_repr());
        let v = theta * theta * theta * v;

        let mut w_zeta = theta;
        let w2 = Self::W.square();
        if t1 > Self::W * t1 {
            w_zeta *= Self::W;
        }
        if t1 > w2 * t1 {
            w_zeta *= Self::W;
        }

        let (mut x, y) = if v == u {
            (w_zeta, num0)
        } else if v == Self::W * u {
            (theta * t1, num1)
        } else if v == w2 * u {
            (theta * t2, num2)
        } else {
            panic!("should not arrive here")
        };

        x *= den;
        Self::GroupAffine::new(x / den, y / den, false)
    }
}

#[cfg(test)]
mod test {
    use crate::{test_vectors::bls12_377_test, IndifferentiableHash};
    use ark_bls12_377::{g1::Parameters, Fq};
    use ark_ff::field_new;
    use itoa::Buffer;

    #[test]
    fn test_phi() {
        // the following test inputs are obtained from the sage code with an input string s = "input to the test function"
        let t1 = field_new!(Fq, "147370668475511062768593417078575852502166305238356083047569242797625942237381383297554976390154627247147926493198");
        let t2 = field_new!(Fq, "224774355318043699772479778485840064101168681398573284663454398463891850089724106885361203908127740164911167151215");

        let num0 = field_new!(Fq, "24214783098335701426130896132135925887483592687760866690530916612138231076276840256460463129849136386592004816422");
        let num1 = field_new!(Fq, "98241388121184563294646776678603892695281563918978233602399875404203868999754681227352730974175637376989076521369");
        let num2 = field_new!(Fq, "57810252927660975112849425869623937226026741146305617779465830017429130492021688720475210916353413056131115781761");
        let den = field_new!(Fq, "78398001865787854177025635014529777727601615001869942467487640632949237780287612570680483119195173304728124338625");

        let res = <Parameters as IndifferentiableHash>::phi(&t1, &t2);

        assert_eq!(res[0], num0);
        assert_eq!(res[1], num1);
        assert_eq!(res[2], num2);
        assert_eq!(res[3], den);
    }

    #[test]
    fn test_eta() {
        // the following test inputs are obtained from the sage code with an input string s = "input to the test function"
        let s = "input to the test function";
        let t1 = field_new!(Fq, "147370668475511062768593417078575852502166305238356083047569242797625942237381383297554976390154627247147926493198");
        let t2 = field_new!(Fq, "224774355318043699772479778485840064101168681398573284663454398463891850089724106885361203908127740164911167151215");

        let res = <Parameters as IndifferentiableHash>::eta(s);
        assert_eq!(res[0], t1);
        assert_eq!(res[1], t2);
    }

    #[test]
    fn test_h_prime() {
        // the following test inputs are obtained from the sage code with an input string s = "input to the test function"
        let t1 = field_new!(Fq, "147370668475511062768593417078575852502166305238356083047569242797625942237381383297554976390154627247147926493198");
        let t2 = field_new!(Fq, "224774355318043699772479778485840064101168681398573284663454398463891850089724106885361203908127740164911167151215");

        let num0 = field_new!(Fq, "24214783098335701426130896132135925887483592687760866690530916612138231076276840256460463129849136386592004816422");
        let num1 = field_new!(Fq, "98241388121184563294646776678603892695281563918978233602399875404203868999754681227352730974175637376989076521369");
        let num2 = field_new!(Fq, "57810252927660975112849425869623937226026741146305617779465830017429130492021688720475210916353413056131115781761");
        let den = field_new!(Fq, "78398001865787854177025635014529777727601615001869942467487640632949237780287612570680483119195173304728124338625");

        let x = field_new!(Fq, "88447843811798607965089937473865912423924078263559752807725536262741898732229175112055733585000923536178427677939");
        let y = field_new!(Fq, "119339617480652487339002458539325679729480695131809659954059558580581317550001999467138841798123360870137733931845");

        let res = <Parameters as IndifferentiableHash>::h_prime(&[num0, num1, num2, den, t1, t2]);
        assert_eq!(x, res.x);
        assert_eq!(y, res.y);
    }

    #[test]
    fn test_map() {
        // the following test inputs are obtained from the sage code with an input string s = "input to the test function"
        let s = "input to the test function";

        let x = field_new!(Fq, "88447843811798607965089937473865912423924078263559752807725536262741898732229175112055733585000923536178427677939");
        let y = field_new!(Fq, "119339617480652487339002458539325679729480695131809659954059558580581317550001999467138841798123360870137733931845");

        let res = <Parameters as IndifferentiableHash>::hash_to_curve(s);
        assert_eq!(x, res.x);
        assert_eq!(y, res.y);

        assert!(res.is_on_curve());
    }

    #[test]
    fn check_test_vectors() {
        let test_vectors = bls12_377_test();
        assert!(test_vectors.len() % 2 == 0);
        for i in 0..test_vectors.len() / 2 {
            let mut buffer = Buffer::new();
            let printed = buffer.format(i);
            let res = <Parameters as IndifferentiableHash>::hash_to_curve(printed);
            assert_eq!(test_vectors[i * 2], res.x);
            assert_eq!(test_vectors[i * 2 + 1], res.y);

            assert!(res.is_on_curve());
        }
    }
}
